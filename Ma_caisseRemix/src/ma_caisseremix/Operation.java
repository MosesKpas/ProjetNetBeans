package ma_caisseremix;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class Operation extends javax.swing.JFrame {
    //Concerne la facture 
    String Nom;
    String Postnom;
    String Prenom;
    String Date;
    String Montant;
    String Frais;
    String Total;
    String Motif;
    String nompp;
// Base de donnee
    private String url = "jdbc:mysql://127.0.0.1:3306/finalcaisse", user = "root", pass = "";
    private Statement st;
    private String requetteVerifier;
    private String requetteAide;
    private String requetteEnregisBilan;
    private String requetteInserer;
    private Connection con;
    private String devise;
    private String rech;
    private String Nomc;
    private String Postc;

    void ouverture() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            this.con = (Connection) DriverManager.getConnection(url, user, pass);
            System.out.println("ouver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }

    void fermeture() {
        try {
            this.con.close();
            this.st.close();
            System.out.println("ferme");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }

    public Operation() {
        initComponents();
        prendrenom();
        nompp = nomp.getText();
        prendrePourcent();
        prendrePourcent1();
        Timer updateTimer;
        int play = 100;
        updateTimer = new Timer(play, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                Date cur = new Date();
                String FormatTimer = "hh:mm:ss";
                String FormatTimer2 = "dd/MM/yyyy";
                DateFormat as = new SimpleDateFormat(FormatTimer);
                DateFormat ase = new SimpleDateFormat(FormatTimer2);
                String a = as.format(cur);
                String b = ase.format(cur);
                heure.setText(a);
                date.setText(b);

            }
        });
        updateTimer.start();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cachecache = new javax.swing.JLabel();
        sfrais = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        nom = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        motdepasse = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        choixoperation = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        choixdevise = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        montantfranc = new javax.swing.JTextField();
        montantdollar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        montantinserer = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        pourc = new javax.swing.JLabel();
        pourc1 = new javax.swing.JLabel();
        sav8 = new javax.swing.JLabel();
        tage = new javax.swing.JLabel();
        heure = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        nomp = new javax.swing.JLabel();
        pos = new javax.swing.JLabel();
        pre = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("OPERATION EN CAISE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sfrais, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cachecache, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sfrais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cachecache, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ma_caisseremix/Images/exit.png"))); // NOI18N
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "v√©rification du client", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        nom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel8.setText("MOT DE PASSE:");

        motdepasse.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel5.setText("NOM:");

        jButton1.setBackground(new java.awt.Color(0, 0, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("VERIFIER");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 51, 153));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("CLEAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(102, 102, 102)
                        .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(motdepasse, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(motdepasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choix", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("OPERATION");

        choixoperation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        choixoperation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DEPOT", "RETRAIT" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setText("DEVISE");

        choixdevise.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        choixdevise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FC", "$" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(choixoperation, 0, 118, Short.MAX_VALUE)
                    .addComponent(choixdevise, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(choixoperation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(choixdevise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solde", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("FC");

        montantfranc.setEditable(false);
        montantfranc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        montantdollar.setEditable(false);
        montantdollar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("$");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(montantfranc, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(montantdollar))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(montantfranc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(montantdollar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("MONTANT");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("TOTAL");

        montantinserer.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        total.setEditable(false);
        total.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton2.setBackground(new java.awt.Color(0, 0, 102));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("EFFECTUER");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 0, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("ACCUEIL");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Inserer le Montant ");

        heure.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        heure.setForeground(new java.awt.Color(255, 255, 255));

        date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        date.setForeground(new java.awt.Color(255, 255, 255));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("Fermer");

        nomp.setBackground(new java.awt.Color(153, 153, 153));
        nomp.setForeground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(heure, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addComponent(sav8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pourc, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(tage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pourc1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(pos)
                        .addGap(28, 28, 28)
                        .addComponent(pre)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(total, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(montantinserer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(35, 35, 35))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(nomp, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton2))
                                .addGap(73, 73, 73))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(57, 57, 57))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(heure, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pourc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sav8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tage, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pourc1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pos)
                            .addComponent(pre))
                        .addGap(103, 103, 103)
                        .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(montantinserer, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(27, 27, 27)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nomp, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Verification dans la base de donnees:
        RechercheClient(nom.getText(), motdepasse.getText());
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //methode pour les operations.
        operation();
        montantinserer.setText("");

    }//GEN-LAST:event_jButton2ActionPerformed
    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(null, "Voulez-vous fermer le programme?", "Quitter",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.OK_OPTION) {

            JOptionPane.showMessageDialog(null, "Gestion de Ma Caisse", "Ma caisse", JOptionPane.INFORMATION_MESSAGE);
        } else {
            new Operation().setVisible(true);
        }
        this.dispose();

    }//GEN-LAST:event_jLabel9MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
        new Choix().setVisible(true);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        nom.setText(null);
        motdepasse.setText(null);

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Operation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cachecache;
    private javax.swing.JComboBox<String> choixdevise;
    private javax.swing.JComboBox<String> choixoperation;
    private javax.swing.JLabel date;
    private javax.swing.JLabel heure;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField montantdollar;
    private javax.swing.JTextField montantfranc;
    private javax.swing.JTextField montantinserer;
    private javax.swing.JPasswordField motdepasse;
    private javax.swing.JTextField nom;
    private javax.swing.JLabel nomp;
    private javax.swing.JLabel pos;
    private javax.swing.JLabel pourc;
    private javax.swing.JLabel pourc1;
    private javax.swing.JLabel pre;
    private javax.swing.JLabel sav8;
    private javax.swing.JLabel sfrais;
    private javax.swing.JLabel tage;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    /* Methode de verification du client*/
    public void RechercheClient(String Nom, String Code) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "select * from ajoutclient where Nom='" + Nom + "' and code ='" + Code + "'";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            if (rs.next()) {
                /* Rappel de la methode qui nous permetra de recuperer le montant du client en Dollar et en franc*/
                RechercheDollar(Nom);
                RechercheFranc(Nom);
            } else {
                JOptionPane.showMessageDialog(null, "Pas d'info sur ce client");
                montantfranc.setText("");
                montantdollar.setText("");
            }
            fermeture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }
    /* Methode de la recherhe en franc */
    public void RechercheFranc(String Nom) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.rech = "select MontantTotal from franc where Nom='" + Nom + "'";
            ResultSet rs = st.executeQuery(rech);
            while (rs.next()) {
                double mm = rs.getDouble("MontantTotal");
                montantfranc.setText("" + mm);
                System.out.println("c'est bon");
            }
            fermeture();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }

    /* Metode ded la recherce en dollar  */
    public void RechercheDollar(String Nom) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.rech = "select MontantTotal from dollar where Nom='" + Nom + "'";
            ResultSet rs = st.executeQuery(rech);
            while (rs.next()) {
                double mm = rs.getDouble("MontantTotal");
                montantdollar.setText("" + mm);
            }
            fermeture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }


    /* Depot dans la table franc */
    public void DepotFranc(String Nom, String Date, double Montant, String Motif, double MontantTotal) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteInserer = "insert into franc value('" + Nom + "','" + Postnom + "','" + Prenom + "','" + Date + "','" + Montant + "','" + Motif + "','" + MontantTotal + "')";
            this.st.executeUpdate(requetteInserer);
            System.out.println("c'est bon");
            fermeture();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }/* Depot dans la table dollar */
    public void DepotDollar(String Nom, String Date, double Montant, String Motif, double MontantTotal) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteInserer = "insert into dollar value('" + Nom + "','" + Postnom + "','" + Prenom + "','" + Date + "','" + Montant + "','" + Motif + "','" + MontantTotal + "')";
            this.st.executeUpdate(requetteInserer);
            System.out.println("c'est bon");
            fermeture();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }

    public void EnregistrementBilan(String Date, double Montant) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteEnregisBilan = "insert into bilan value('" + Date + "','" + Montant + "')";
            this.st.executeUpdate(requetteEnregisBilan);
            System.out.println("c'est ok");
            fermeture();
            JOptionPane.showMessageDialog(null, "Enregistrement du montant");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }

    public void EnregistrementBilan2(String Date, double Montant2) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteEnregisBilan = "insert into bilan2 value('" + Date + "','" + Montant2 + "')";
            this.st.executeUpdate(requetteEnregisBilan);
            System.out.println("c'est ok");
            fermeture();
            JOptionPane.showMessageDialog(null, "Enregistrement du montant");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }

    public void RetraitDollar(String nom, String post, String pre, String Date, double Montant, String Motif, double MontantTotal) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteInserer = "insert into dollar value('" + nom + "','" + post + "','" + pre + "','" + Date + "','" + Montant + "','" + Motif + "','" + MontantTotal + "')";
            this.st.executeUpdate(requetteInserer);
            System.out.println("c'est ok");
            fermeture();
            JOptionPane.showMessageDialog(null, "Retrait du montant en Dollar");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }

    public void RfraisF() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "select Montant from frais where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                double ag = rs.getDouble("Montant");
                sfrais.setText("" + ag);
            }
            fermeture();
        } catch (Exception e) {

        }
    }

    public void RfraisD() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "select Montant1 from frais1 where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                double ag = rs.getDouble("Montant1");
                sfrais.setText("" + ag);
            }
            fermeture();
        } catch (Exception e) {

        }
    }

    public void RFranc() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "select Montant2 from bilan2 where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                double ag = rs.getDouble("Montant2");
                cachecache.setText("" + ag);
            }
            fermeture();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }

    public void RDollar() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "select Montant from bilan where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                double ag = rs.getDouble("Montant");
                cachecache.setText("" + ag);
            }
            fermeture();
            /*affiche le ;ontant total  sur le cachecache*/
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "" + e.getMessage());
        }
    }

    public void RetraitFranc(String nom, String post, String pre, String Date, double Montant, String Motif, double MontantTotal) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteInserer = "insert into franc value('" + nom + "','" + post + "','" + pre + "','" + Date + "','" + Montant + "','" + Motif + "','" + MontantTotal + "')";
            this.st.executeUpdate(requetteInserer);
            System.out.println("c'est ok");
            fermeture();
            JOptionPane.showMessageDialog(null, "Retrait du montant en franc");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }

    }
    // facture

    public PageFormat getPageFormat(PrinterJob pj) {

        PageFormat pf = pj.defaultPage();
        Paper paper = pf.getPaper();

        double headerHeight = 5.0;
        double footerHeight = 5.0;
        double width = cm_to_pp(8);
        double height = cm_to_pp(headerHeight + footerHeight);
        paper.setSize(width, height);
        pf.setPaper(paper);
        return pf;
    }

    protected static double cm_to_pp(double cm) {
        return toPPI(cm * 0.393600787);
    }

    protected static double toPPI(double inch) {
        return inch * 100d;
    }

    public class BillPrintale implements Printable {

        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
            int result = NO_SUCH_PAGE;
            if (pageIndex == 0) {
                Graphics2D g2d = (Graphics2D) graphics;
                double width = pageFormat.getImageableHeight();
                g2d.translate((int) pageFormat.getImageableX(), (int) pageFormat.getImageableX());
                try {
                    int y = 15;
                    int yshift = 20;
                    int headerRectHeight = 50;
                    g2d.setFont(new Font("Monospaced", Font.PLAIN, 9));
                    //g2d.drawImage(icon.getmage(),50,20,90,30, rootPane); y+=yshift+30;
                    g2d.drawString("--------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString("                           MA CAISSE                          ", 40, y);
                    y += yshift;
                    g2d.drawString("--------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString("Nos coordonn√©es                                               ", 40, y);
                    y += yshift;
                    g2d.drawString("LIMETE,16√©me rue R√©sidentiel N¬∫/01.                           ", 40, y);
                    y += yshift;
                    g2d.drawString("Contactez le:+243 82 17 12 363.                                            ", 40, y);
                    y += yshift;
                    g2d.drawString("--------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString("Service de gestion                                            ", 40, y);
                    y += yshift;
                    g2d.drawString("Date   :" + Date + "                                              ", 40, y);
                    y += yshift;
                    g2d.drawString("--------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString("Identit√©s du client                                           ", 40, y);
                    y += yshift;
                    g2d.drawString("--------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString("                                         ", 10, y);
                    y += yshift;
                    g2d.drawString("    Nom     :" + Nom + " ", 40, y);
                    y += yshift;
                    g2d.drawString("                                         ", 10, y);
                    y += yshift;
                    g2d.drawString("**************************************************************", 40, y);
                    y += yshift;
                    g2d.drawString(" Op√©ration effectuer + montant            ", 42, y);
                    y += yshift;
                    g2d.drawString("**************************************************************", 40, y);
                    y += yshift;
                    g2d.drawString("     Motif        :" + Motif + " ", 30, y);
                    y += yshift;
                    g2d.drawString("     Montant      :" + Montant + " ", 30, y);
                    y += yshift;
                    g2d.drawString("     Frais        :" + Frais + " ", 30, y);
                    y += yshift;
                    g2d.drawString("     Montant Total:" + Total + " ", 30, y);
                    y += yshift;
                    g2d.drawString("---------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString(" Signature de " + Nom + "          Signature  de " + nompp + " ", 55, y);
                    y += yshift;
                    g2d.drawString("                            ", 12, y);
                    y += yshift;
                    g2d.drawString("---------------------------------------------------------------", 40, y);
                    y += yshift;
                    g2d.drawString("                    Created by G5 Progs         ", 45, y);
                    y += yshift;
                    g2d.drawString("                                             ", 12, y);
                    y += yshift;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                result = PAGE_EXISTS;
            }
            return result;
        }
    }

    public void Impri() {
        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setPrintable(new BillPrintale(), getPageFormat(pj));
        try {
            pj.print();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
//Cette methode permet de prendre le pourcentage au niveau de la table proprio
//prendre le frais qui seras soustrait du depot en franc

    public void prendrePourcent() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "select Pourcentage from proprio where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                double ag = rs.getDouble("Pourcentage");
                pourc.setText("" + ag);
                System.out.println("prise du frais en franc");
            }
            fermeture();
        } catch (Exception e) {
        }
    }
//cette methode permet de prendre le pourcentage au niveau de la table proprio
//prendre le frais qui seras soustrait du depot dollar

    public void prendrePourcent1() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "Select pourcentage1 From proprio where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                double ga = rs.getDouble("pourcentage1");
                pourc1.setText("" + ga);
                System.out.println("prise du frais en dollar");
            }
            fermeture();
        } catch (Exception e) {
        }
    }

    public void MonFrais(double cfrd, String Date) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteInserer = "insert into frais value('" + cfrd + "','" + Date + "')";
            this.st.executeUpdate(requetteInserer);
            System.out.println("c'est ok");
            fermeture();
            JOptionPane.showMessageDialog(null, "Prise du Frais");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }

    public void monfraisd(double cfrd, String Date) {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteInserer = "insert into frais1 value('" + cfrd + "','" + Date + "')";
            this.st.executeUpdate(requetteInserer);
            System.out.println("c'est ok");
            fermeture();
            JOptionPane.showMessageDialog(null, "Prise du Frais");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "erreur " + e.getMessage());
        }
    }

    public void prendrenom() {
        try {
            ouverture();
            this.st = (Statement) this.con.createStatement();
            this.requetteVerifier = "Select nom From proprio where 1";
            ResultSet rs = this.st.executeQuery(requetteVerifier);
            while (rs.next()) {
                String ga = rs.getString("nom");
                nomp.setText(ga);
                System.out.println("prise du nom");
            }
            fermeture();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Pas de nom");
        }
    }

    public void operation() {
        /* recuperation du choix de l'operation*/
        String choixOp = (String) choixoperation.getSelectedItem();
        /* condition du choix de l'operation
1. si son choix est le depot*/
        if (nom.getText().isEmpty() || motdepasse.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "inserer les informations du client!!");
        }
        if (choixOp.equals("DEPOT")) {
            /*recuperation du choix de la devise*/
            String choixDev = (String) choixdevise.getSelectedItem();
            if (choixDev.equals("$")) {
                /* recuperation du montant a deposer dans le champ montantinserer */
                double MontantInserer = Double.parseDouble(montantinserer.getText());
                /* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. l√† nous sommes dans dollar*/
                double MontantActuel = Double.parseDouble(montantdollar.getText());
                /* recuperation du pourcentage des frais a couper qui est inscrit dans 
pourc initialis√© par le proprietaire de la boite*/
                double pourcentage1 = Double.parseDouble(pourc1.getText());
                /*Calcul des frais a couper*/
                double frais = MontantInserer * (pourcentage1 / 100);
                /* calcul de la somme a introduire dans le compte du client*/
                double nouveauMontant = MontantInserer - frais;
                final SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
                final String datestr = sdf.format(new Date());
                String motif = "D√©p√¥t ";
                total.setText("" + nouveauMontant);
                double mmmm = Double.parseDouble(total.getText());
                double NouveauMontant = mmmm + MontantActuel;
                /* on depose cela dans la table franc*/
                DepotDollar(nom.getText(), datestr, MontantInserer, motif, NouveauMontant);
                RfraisD();
                double frd = Double.parseDouble(sfrais.getText());
                double cfrd = frd + frais;
                monfraisd(cfrd, datestr);
                RDollar();
                double b = Double.parseDouble(cachecache.getText());
                double c = b + nouveauMontant;
                EnregistrementBilan(datestr, c);
                cachecache.setText("");
                total.setText("");
                montantinserer.setText("");
                Nom = (nom.getText());
                Date = (datestr);
                Montant = ("" + MontantInserer);
                Motif = (motif);
                Frais = ("" + frais);
                Total = ("" + NouveauMontant);
                int option = JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?", "Impression",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (option == JOptionPane.OK_OPTION) {
                    Impri();
                } else {

                }
            }
            /*-------------------- depot Franc-------------------*/
            if (choixDev.equals("FC")) {
                /* recuperation du montant a deposer dans le champ montantinserer */
                double MontantInserer = Double.parseDouble(montantinserer.getText());
                /* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. l√† nous sommes dans dollar*/
                double MontantActuel = Double.parseDouble(montantfranc.getText());
                /* recuperation du pourcentage des frais a couper qui est inscrit dans 
pourc initialis√© par le proprietaire de la boite*/
                double pourcentage = Double.parseDouble(pourc.getText());
                /*Calcul des frais a couper*/
                double frais = MontantInserer * (pourcentage / 100);
                /* calcul de la somme a introduire dans le compte du client*/
                double nouveauMontant = MontantInserer - frais;

                final SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
                final String datestr = sdf.format(new Date());
                String motif = "D√©p√¥t ";
                total.setText("" + nouveauMontant);
                double mmmm = Double.parseDouble(total.getText());
                double NouveauMontant = mmmm + MontantActuel;
                /* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Depos√© : "+nouveauMontant+"\n appuyer 1 pour continuer ");
                DepotFranc(nom.getText(), datestr, MontantInserer, motif, NouveauMontant);
                RfraisF();
                double frd = Double.parseDouble(sfrais.getText());
                double cfrd = frd + frais;
                MonFrais(cfrd, datestr);
                RFranc();
                double b = Double.parseDouble(cachecache.getText());
                double c = b + nouveauMontant;
                EnregistrementBilan2(datestr, c);
                cachecache.setText("");
                montantinserer.setText("");
                total.setText("");
                Nom = (nom.getText());
                Date = (datestr);
                Montant = ("" + MontantInserer);
                Motif = (motif);
                Frais = ("" + frais);
                Total = ("" + NouveauMontant);
                int option = JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?", "Impression",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (option == JOptionPane.OK_OPTION) {
                    Impri();
                } else {
                    
                }
            }
        }

        /*------------------- Retrait dollar-----------------------*/
        if (choixOp.equals("RETRAIT")) {
            /*recuperation du choix de la devise*/
            String choixDev = (String) choixdevise.getSelectedItem();
            if (choixDev.equals("$")) {
                /* recuperation du montant a deposer dans le champ montantinserer */
                double MontantInserer = Double.parseDouble(montantinserer.getText());
                /* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. l√† nous sommes dans dollar*/
                double MontantActuel = Double.parseDouble(montantdollar.getText());
                double nouveauMontant = MontantActuel - MontantInserer;
                if (nouveauMontant > 0) {
                    total.setText("" + nouveauMontant);
                    double NouveauMontant = Double.parseDouble(total.getText());
                    final SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
                    final String datestr = sdf.format(new Date());
                    String motif = "Retrait";
                    /* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Depos√© : "+nouveauMontant+"\n appuyer 1 pour continuer ");
                    DepotDollar(nom.getText(), datestr, MontantInserer, motif, nouveauMontant);

                    RDollar();
                    double b = Double.parseDouble(cachecache.getText());
                    double c = b - MontantInserer;
                    EnregistrementBilan(datestr, c);
                    cachecache.setText("");
                    total.setText("");
                    montantinserer.setText("");

                    Nom = (nom.getText());
                    Date = (datestr);
                    Montant = ("" + MontantInserer);
                    Motif = (motif);
                    Frais = ("---");
                    Total = ("" + NouveauMontant);
                    int option = JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?", "Impression",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (option == JOptionPane.OK_OPTION) {
                        Impri();
                    } else {

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Votre solde et insuffisant");

                }
            }
            /*------------------- Retrait franc-----------------------*/
            if (choixDev.equals("FC")) {
                /* recuperation du montant a deposer dans le champ montantinserer */
                double MontantInserer = Double.parseDouble(montantinserer.getText());
                /* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. l√† nous sommes dans dollar*/
                double MontantActuel = Double.parseDouble(montantfranc.getText());
                double nouveauMontant = MontantActuel - MontantInserer;
                if (nouveauMontant > 0) {
                    total.setText("" + nouveauMontant);
                    double NouveauMontant = Double.parseDouble(total.getText());
                    final SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
                    final String datestr = sdf.format(new Date());
                    String motif = "Retrait";
                    /* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Depos√© : "+nouveauMontant+"\n appuyer 1 pour continuer ");
                    DepotFranc(nom.getText(), datestr, MontantInserer, motif, NouveauMontant);

                    RFranc();
                    double b = Double.parseDouble(cachecache.getText());
                    double c = b - MontantInserer;
                    EnregistrementBilan2(datestr, c);
                    cachecache.setText("");
                    total.setText("");
                    montantinserer.setText("");

                    Nom = (nom.getText());
                    Date = (datestr);
                    Montant = ("" + MontantInserer);
                    Motif = (motif);
                    Frais = ("---");
                    Total = ("" + NouveauMontant);
                    int option = JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?", "Impression",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (option == JOptionPane.OK_OPTION) {
                        Impri();
                    } else {

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Votre solde est  insuffisant");
                }
            }
        }
    }
}
