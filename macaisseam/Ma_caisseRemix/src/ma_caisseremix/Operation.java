package ma_caisseremix;
// different imports
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
/**
 * Ma Caisse
 * @author G5 PROGS 
 * Kapend  Moise
 * Ntumba  Sephora
 * Nyota Falonne
 * Kamuanya Tabitha
 */
public class Operation extends javax.swing.JFrame {
    //declaration des variables qui feront partie du corps de la facture

    Double bHeight=0.0;
    String Nom;
    String Postnom;
    String Prenom;
    String Date;
    String Montant;
    String Frais;
    String Total;
    String Motif;
    String Devise1;
    String NomProPrio;
// Base de donnee
  private String url="jdbc:mysql://127.0.0.1:3306/finalcaisse",user="root",pass="";
  private Statement st;
  private String requetteVerifier;
  private String requetteAide;
  private String requetteEnregisBilan;
  private String requetteInserer;
  private Connection con;
  private String devise; 
  private String rech;
  void ouverture(){
      try {
          Class.forName("com.mysql.jdbc.Driver");
          this.con=(Connection)DriverManager.getConnection(url,user,pass);
          System.out.println("ouver");
      } catch (Exception e) {JOptionPane.showMessageDialog(null,""+e.getMessage());
      }
  }
  void fermeture(){
      try {
          this.con.close();
          this.st.close();
          System.out.println("ferme");
      } catch (Exception e) {JOptionPane.showMessageDialog(null,""+e.getMessage());
      }
}
  /*      codes genere lors de la creation de l'interface              */
    public Operation() {
        initComponents();
        
        prendreNomDuProprio();
        NomProPrio=NomPro.getText();
        
        
        /*  rappel de la methode pour prendre le pourcentage franc et dollar   */
        prendrePourcent();
        prendrePourcent1();
        
         Timer updateTimer;
        int play=100;
        updateTimer=new Timer(play,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                Date cur= new Date();   
                String FormatTimer="hh:mm:ss";
                String FormatTimer2="dd/MM/yyyy";
                DateFormat as=new SimpleDateFormat(FormatTimer);
                DateFormat ase=new SimpleDateFormat(FormatTimer2);
                String a=as.format(cur);
                String b=ase.format(cur);
                heure.setText(a);
                date.setText(b);
                
            }
        });
        updateTimer.start();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cachecache = new javax.swing.JLabel();
        sfrais = new javax.swing.JLabel();
        BoutonFermer = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        nom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        motdepasse = new javax.swing.JPasswordField();
        pre = new javax.swing.JTextField();
        post = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        BoutonVerifier = new javax.swing.JButton();
        BoutonClear = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        choixoperation = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        choixdevise = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        montantfranc = new javax.swing.JTextField();
        montantdollar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        montantinserer = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        BoutonEffectuer = new javax.swing.JButton();
        BoutonAccueil = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        pourc = new javax.swing.JLabel();
        pourc1 = new javax.swing.JLabel();
        sav8 = new javax.swing.JLabel();
        tage = new javax.swing.JLabel();
        heure = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        NomPro = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("OPERATION EN CAISE");

        cachecache.setForeground(new java.awt.Color(255, 255, 255));

        sfrais.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sfrais, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cachecache, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sfrais, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cachecache, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 0, -1, -1));

        BoutonFermer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ma_caisseremix/Images/exit.png"))); // NOI18N
        BoutonFermer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BoutonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BoutonFermerMouseClicked(evt);
            }
        });
        jPanel1.add(BoutonFermer, new org.netbeans.lib.awtextra.AbsoluteConstraints(607, 20, -1, -1));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Verification du client", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        nom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel6.setText("POSTNOM:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel8.setText("MOT DE PASSE:");

        motdepasse.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        pre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        post.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel5.setText("NOM:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel7.setText("PRENOM:");

        BoutonVerifier.setBackground(new java.awt.Color(0, 0, 102));
        BoutonVerifier.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BoutonVerifier.setForeground(new java.awt.Color(255, 255, 255));
        BoutonVerifier.setText("VERIFIER");
        BoutonVerifier.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BoutonVerifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonVerifierActionPerformed(evt);
            }
        });

        BoutonClear.setBackground(new java.awt.Color(0, 51, 153));
        BoutonClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BoutonClear.setForeground(new java.awt.Color(255, 255, 255));
        BoutonClear.setText("CLEAR");
        BoutonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(BoutonVerifier))
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BoutonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pre)
                                    .addComponent(motdepasse, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(post, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(post, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(pre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(motdepasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BoutonClear, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(BoutonVerifier, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(13, 13, 13))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 254, -1, -1));

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Choix", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("OPERATION");

        choixoperation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        choixoperation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DEPOT", "RETRAIT" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setText("DEVISE");

        choixdevise.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        choixdevise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FC", "$" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(choixoperation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choixdevise, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(choixoperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(choixdevise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addContainerGap())
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 114, -1, -1));

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solde", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("FC");

        montantfranc.setEditable(false);
        montantfranc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        montantdollar.setEditable(false);
        montantdollar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("$");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(montantfranc, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(montantdollar))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(montantfranc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(montantdollar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 125, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("MONTANT");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(395, 326, -1, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("TOTAL");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 371, -1, -1));

        montantinserer.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jPanel1.add(montantinserer, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 320, 95, 31));

        total.setEditable(false);
        total.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 369, 95, -1));

        BoutonEffectuer.setBackground(new java.awt.Color(0, 0, 102));
        BoutonEffectuer.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BoutonEffectuer.setForeground(new java.awt.Color(255, 255, 255));
        BoutonEffectuer.setText("EFFECTUER");
        BoutonEffectuer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BoutonEffectuer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonEffectuerActionPerformed(evt);
            }
        });
        jPanel1.add(BoutonEffectuer, new org.netbeans.lib.awtextra.AbsoluteConstraints(482, 402, -1, 40));

        BoutonAccueil.setBackground(new java.awt.Color(102, 0, 0));
        BoutonAccueil.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        BoutonAccueil.setForeground(new java.awt.Color(255, 255, 255));
        BoutonAccueil.setText("ACCUEIL");
        BoutonAccueil.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BoutonAccueil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoutonAccueilActionPerformed(evt);
            }
        });
        jPanel1.add(BoutonAccueil, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 502, -1, 40));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Inserer le Montant ");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 295, -1, -1));

        pourc.setForeground(new java.awt.Color(102, 102, 102));
        jPanel1.add(pourc, new org.netbeans.lib.awtextra.AbsoluteConstraints(107, 0, 8, 44));

        pourc1.setForeground(new java.awt.Color(102, 102, 102));
        jPanel1.add(pourc1, new org.netbeans.lib.awtextra.AbsoluteConstraints(522, 20, 14, 39));
        jPanel1.add(sav8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 101, 46));

        tage.setForeground(new java.awt.Color(102, 102, 102));
        jPanel1.add(tage, new org.netbeans.lib.awtextra.AbsoluteConstraints(117, 0, -1, 52));

        heure.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        heure.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(heure, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 85, 34));

        date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        date.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 536, 184, 25));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("Fermer");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(599, 56, 50, -1));

        NomPro.setForeground(new java.awt.Color(102, 102, 102));
        jPanel1.add(NomPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 502, 31, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*      inutile*/
    private void nomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomActionPerformed

    /*  METHODE DU BOUTON VERIFIER*/
    
    private void BoutonVerifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonVerifierActionPerformed
        // Verification dans la base de donnees:
        RechercheClient(nom.getText(),post.getText(),pre.getText(),motdepasse.getText());
    }//GEN-LAST:event_BoutonVerifierActionPerformed

    /*      METHODE DU BOUTON EFFECTUER*/
    
    private void BoutonEffectuerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonEffectuerActionPerformed
        //methode pour les operations.
        if((nom.getText().isEmpty())&&(post.getText().isEmpty())&&(pre.getText().isEmpty())&&(motdepasse.getText().isEmpty())){
        JOptionPane.showMessageDialog(null, "Veuillez saisir les informations du client");
        montantinserer.setText("");
        }
        else{
        operation();
        montantinserer.setText("");
        }
        
    }//GEN-LAST:event_BoutonEffectuerActionPerformed

/*            METHODE DU BOUTON FERMER*/

    private void BoutonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BoutonFermerMouseClicked
        // TODO add your handling code here:
        int option=JOptionPane.showConfirmDialog(null, "Voulez-vous fermer le programme?","Quitter",
                JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
           
            JOptionPane.showMessageDialog(null,"Gestion de Ma Caisse","Ma caisse",JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            new Operation().setVisible(true);
        }
        this.dispose();
       
    }//GEN-LAST:event_BoutonFermerMouseClicked

    /*      MEYHODE DU BOUTON ACCUEIL*/
    
    private void BoutonAccueilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonAccueilActionPerformed
        // TODO add your handling code here:
        dispose();
        new Choix().setVisible(true);

    }//GEN-LAST:event_BoutonAccueilActionPerformed

    /*  METHODE DU BOUTON CLEAR*/
    
    private void BoutonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoutonClearActionPerformed
        // TODO add your handling code here:
        nom.setText(null);
        post.setText(null);
        pre.setText(null);
        motdepasse.setText(null);
        
    }//GEN-LAST:event_BoutonClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Operation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Operation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BoutonAccueil;
    private javax.swing.JButton BoutonClear;
    private javax.swing.JButton BoutonEffectuer;
    private javax.swing.JLabel BoutonFermer;
    private javax.swing.JButton BoutonVerifier;
    private javax.swing.JLabel NomPro;
    private javax.swing.JLabel cachecache;
    private javax.swing.JComboBox<String> choixdevise;
    private javax.swing.JComboBox<String> choixoperation;
    private javax.swing.JLabel date;
    private javax.swing.JLabel heure;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField montantdollar;
    private javax.swing.JTextField montantfranc;
    private javax.swing.JTextField montantinserer;
    private javax.swing.JPasswordField motdepasse;
    private javax.swing.JTextField nom;
    private javax.swing.JTextField post;
    private javax.swing.JLabel pourc;
    private javax.swing.JLabel pourc1;
    private javax.swing.JTextField pre;
    private javax.swing.JLabel sav8;
    private javax.swing.JLabel sfrais;
    private javax.swing.JLabel tage;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    /* Methode de verification du client*/
    
     public void RechercheClient(String Nom, String Postnom, String Prenom, String Code){
    try {
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.requetteVerifier="select * from ajoutclient where Nom='"+Nom+"' and Postnom ='"+Postnom+"'  and Prenom ='"+Prenom+"'  and code ='"+Code+"'";
        ResultSet rs= this.st.executeQuery(requetteVerifier);
        if(rs.next()){
            /* Rappel de la methode qui nous permetra de recuperer le montant du client en Dollar et en franc*/
            
            RechercheDollar(Nom, Postnom, Prenom);
            RechercheFranc(Nom, Postnom, Prenom);
        
        }
        else{
        JOptionPane.showMessageDialog(null,"Pas d'info sur ce client");
        montantfranc.setText("");
        montantdollar.setText("");
        
        }
        fermeture();
    } catch (Exception e) {JOptionPane.showMessageDialog(null,""+e.getMessage());
    }
}
     
     /* Methode de la recherhe en franc */
     
    public void RechercheFranc(String Nom, String Postnom,String Prenom){
    try {
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.rech="select MontantTotal from franc where Nom='"+Nom+"' and Postnom='"+Postnom+"' and Prenom='"+Prenom+"' ";
        ResultSet rs=st.executeQuery(rech);
        while(rs.next())   
        {double mm=rs.getDouble("MontantTotal");
        montantfranc.setText(""+mm);
            System.out.println("c'est bon");
        }
        fermeture();
    } catch (SQLException e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
    }
}
    
    /* Metode ded la recherce en dollar  */
    
public void RechercheDollar(String Nom, String Postnom,String Prenom){
    try {
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.rech="select MontantTotal from dollar where Nom='"+Nom+"' and Postnom='"+Postnom+"' and Prenom='"+Prenom+"' ";
        ResultSet rs=st.executeQuery(rech);
        while(rs.next())   
        {double mm=rs.getDouble("MontantTotal");
        montantdollar.setText(""+mm);
        }
        fermeture();   
    } catch (Exception e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
    }
}


 /* Depot dans la table franc */

 public void DepotFranc(String Nom,String Postnom,String Prenom, String Date, double Montant, String Motif,double MontantTotal){
    try {
        ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteInserer="insert into franc value('"+Nom+"','"+Postnom+"','"+Prenom+"','"+Date+"','"+Montant+"','"+Motif+"','"+MontantTotal+"')";
    this.st.executeUpdate(requetteInserer);
        System.out.println("c'est bon");
        fermeture();
    } catch (SQLException e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
    }
}
 
 /* Depot dans la table dollar */
 
 public void DepotDollar(String Nom,String Postnom,String Prenom, String Date, double Montant, String Motif,double MontantTotal){
    try {
        ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteInserer="insert into dollar value('"+Nom+"','"+Postnom+"','"+Prenom+"','"+Date+"','"+Montant+"','"+Motif+"','"+MontantTotal+"')";
    this.st.executeUpdate(requetteInserer);
        System.out.println("c'est bon");
        fermeture();
    } catch (SQLException e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
    }
}
 
 /*    Enregistrement dans le bilan Dollar  */
 
 public void EnregistrementBilan(String Date,double Montant){
    try {ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteEnregisBilan="insert into bilan value('"+Date+"','"+ Montant+"')";
    this.st.executeUpdate(requetteEnregisBilan);
        System.out.println("c'est ok");
         fermeture();
         JOptionPane.showMessageDialog(null,"Enregistrement du montant");
    } catch (Exception e) {JOptionPane.showMessageDialog(null,""+e.getMessage());
    }
}
 
 /*                 Enregistrement dans le bilan2 franc    */
 
 public void EnregistrementBilan2(String Date,double Montant2){
    try {ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteEnregisBilan="insert into bilan2 value('"+Date+"','"+Montant2+"')";
    this.st.executeUpdate(requetteEnregisBilan);
        System.out.println("c'est ok");
         fermeture();
         JOptionPane.showMessageDialog(null,"Enregistrement du montant");
    } catch (Exception e) {JOptionPane.showMessageDialog(null,""+e.getMessage());
    }
}
 
 /*     enregistrement du   Retrait Dollar  */
 
 public void RetraitDollar(String nom,String post,String pre, String Date, double Montant, String Motif,double MontantTotal){
    try {ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteInserer="insert into dollar value('"+nom+"','"+post+"','"+pre+"','"+Date+"','"+Montant+"','"+Motif+"','"+MontantTotal+"')";
    this.st.executeUpdate(requetteInserer);
        System.out.println("c'est ok");
        fermeture();
        JOptionPane.showMessageDialog(null,"Retrait du montant en Dollar");
    } catch (Exception e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
    }
}
 
 /*      Reccuperation du frais Dollar pour l'addition   */
 
  public void RfraisF(){
      try{
          ouverture();
          this.st=(Statement)this.con.createStatement();
          this.requetteVerifier="select Montant from frais where 1";
          ResultSet rs =this.st.executeQuery(requetteVerifier);
          while(rs.next()){
              double ag=rs.getDouble("Montant");
              sfrais.setText(""+ag);
          }
          fermeture();
      }catch(Exception e){
          
      }
  }
  
  /*     Reccuperation du frais Franc pour l'addition       */
  
  public void RfraisD(){
      try{
          ouverture();
          this.st=(Statement)this.con.createStatement();
          this.requetteVerifier="select Montant1 from frais1 where 1";
          ResultSet rs =this.st.executeQuery(requetteVerifier);
          while(rs.next()){
              double ag=rs.getDouble("Montant1");
              sfrais.setText(""+ag);
          }
          fermeture();
      }catch(Exception e){
          
      }
  }
  
  /*     Selectionner montant du bilan franc pour l'operation       */
  
  public void RFranc(){
    try {
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.requetteVerifier="select Montant2 from bilan2 where 1";
        ResultSet rs= this.st.executeQuery(requetteVerifier);
        while(rs.next()){
         double ag=rs.getDouble("Montant2");
        cachecache.setText(""+ag);
        }
        fermeture();
      
    } catch (Exception e){JOptionPane.showMessageDialog(null,""+e.getMessage());
    }
}
  
  /*     Selectionner montant du bilan dollar pour l'operation       */

  public void RDollar(){
    try {
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.requetteVerifier="select Montant from bilan where 1";
        ResultSet rs= this.st.executeQuery(requetteVerifier);
        while(rs.next()){
         double ag=rs.getDouble("Montant");
        cachecache.setText(""+ag);
        }
        fermeture();
        /*affiche le ;ontant total  sur le cachecache*/
    } catch (Exception e){JOptionPane.showMessageDialog(null,""+e.getMessage());
    }
}
  
  /*      Enregistrement du Retrait Franc      */
  
  public void RetraitFranc(String nom,String post,String pre, String Date, double Montant, String Motif,double MontantTotal){
    try {
        ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteInserer="insert into franc value('"+nom+"','"+post+"','"+pre+"','"+Date+"','"+Montant+"','"+Motif+"','"+MontantTotal+"')";
    this.st.executeUpdate(requetteInserer);
        System.out.println("c'est ok");
        fermeture();
        JOptionPane.showMessageDialog(null,"Retrait du montant en franc");
    } catch (Exception e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
    }
    
}
  
/*         Facture */
public PageFormat getPageFormat(PrinterJob pj){

    PageFormat pf=pj.defaultPage();
    Paper paper= pf.getPaper();
    
    double bodyHeight= bHeight;
    double headerHeight = 5.0;
    double footerHeight = 5.0;
    double width= cm_to_pp(8);
    double height= cm_to_pp(headerHeight+bodyHeight+footerHeight);
    paper.setSize(width,height);
    pf.setPaper(paper);
return pf;
}
protected static double cm_to_pp(double cm){
return toPPI(cm*0.393600787);
}
protected static double toPPI(double inch){
return inch * 100d;
}
public class BillPrintale implements Printable{
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException{
    int result=NO_SUCH_PAGE;
    if(pageIndex==0){
    Graphics2D  g2d= (Graphics2D) graphics;
    double width= pageFormat.getImageableHeight();
    g2d.translate((int)pageFormat.getImageableX(),(int) pageFormat.getImageableX());
        try {
            int y=15;
            int yshift=20;
            int headerRectHeight=50;
            g2d.setFont(new Font("Monospaced",Font.PLAIN,9));
            //g2d.drawImage(icon.getmage(),50,20,90,30, rootPane); y+=yshift+30;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString("                           MA CAISSE                          ",40,y); y+=yshift;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString(" Nos coordonness                                              ",40,y); y+=yshift;
            g2d.drawString(" Limete 16ème rue Residentiel N* 30                           ",40,y); y+=yshift;
            g2d.drawString(" Contact : +243 82 17 12 363                                  ",40,y); y+=yshift;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString("Service de gestion                                            ",40,y); y+=yshift;
            g2d.drawString("Date    :"+Date+"                                             ",40,y); y+=yshift;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString("Identite complet du client..                                  ",40,y); y+=yshift;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString("                                                              ",10,y); y+=yshift;
            g2d.drawString("     Nom     : "+Nom+"                                        ",40,y); y+=yshift;
            g2d.drawString("     Postnom : "+Postnom+"                                    ",40,y); y+=yshift;
            g2d.drawString("     Prenom  : "+Prenom+"                                     ",40,y); y+=yshift;
            g2d.drawString("                                                              ",10,y); y+=yshift;
            g2d.drawString("**************************************************************",40,y); y+=yshift;
            g2d.drawString("Operation effectuer + Montant                                 ",42,y); y+=yshift;
            g2d.drawString("**************************************************************",40,y); y+=yshift;
            g2d.drawString("     Devise       :"+Devise1+"                                ",30,y); y+=yshift;
            g2d.drawString("     Motif        :"+Motif+"                                  ",30,y); y+=yshift;
            g2d.drawString("     Montant      :"+Montant+"                                ",30,y); y+=yshift;
            g2d.drawString("     Frais        :"+Frais+"                                  ",30,y); y+=yshift;
            g2d.drawString("     Montant Total:"+Total+"                                  ",30,y); y+=yshift;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString(" Signature "+Nom+"                   Signé par "+NomProPrio+"    ",55,y); y+=yshift;
            g2d.drawString("                                                              ",12,y); y+=yshift;
            g2d.drawString("--------------------------------------------------------------",40,y); y+=yshift;
            g2d.drawString("                       Created by G5 Progs                    ",45,y); y+=yshift;
            g2d.drawString("                                                              ",12,y); y+=yshift;
        } catch (Exception e) { e.printStackTrace();
        }
    result=PAGE_EXISTS;
    }
    return result;
    }
}
public void Impri(){
PrinterJob pj=PrinterJob.getPrinterJob();
pj.setPrintable(new BillPrintale(),getPageFormat(pj));
    try {
        pj.print();
    } catch (Exception e) { e.printStackTrace();
    }
}   


//Cette methode permet de prendre le pourcentage au niveau de la table proprio
//prendre le frais qui seras soustrait du depot en franc


public void prendrePourcent(){
    try {
         ouverture();
        this.st=(Statement)this.con.createStatement();
        this.requetteVerifier="select Pourcentage from proprio where 1";
        ResultSet rs= this.st.executeQuery(requetteVerifier);
        while(rs.next()){
         double ag=rs.getDouble("Pourcentage");
        pourc.setText(""+ag);
            System.out.println("prise du frais en franc");
        }
        fermeture();
    } catch (Exception e) {
    }
}


//cette methode permet de prendre le pourcentage au niveau de la table proprio
//prendre le frais qui seras soustrait du depot dollar


public void prendrePourcent1(){
    try{
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.requetteVerifier="Select pourcentage1 From proprio where 1";
        ResultSet rs = this.st.executeQuery(requetteVerifier);
        while(rs.next()){
            double ga =rs.getDouble("pourcentage1");
            pourc1.setText(""+ga);
            System.out.println("prise du frais en dollar");
        }
        fermeture();
    }catch(Exception e){    
    }
}

/*         Enregistrement du frais dollar */

public void MonFrais(double cfrd, String Date){
  try {ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteInserer="insert into frais value('"+cfrd+"','"+Date+"')";
    this.st.executeUpdate(requetteInserer);
        System.out.println("c'est ok");
        fermeture();
        JOptionPane.showMessageDialog(null,"Prise du Frais");
    } catch (Exception e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
}
}

/*         Enregistrement du frais franc */

public void monfraisd(double cfrd,String Date){
    try {ouverture();
    this.st=(Statement)this.con.createStatement();
    this.requetteInserer="insert into frais1 value('"+cfrd+"','"+Date+"')";
    this.st.executeUpdate(requetteInserer);
        System.out.println("c'est ok");
        fermeture();
        JOptionPane.showMessageDialog(null,"Prise du Frais");
    } catch (Exception e) {JOptionPane.showMessageDialog(null,"erreur "+e.getMessage());
}
}


/* Grandes Operations*/


public void operation(){
/* recuperation du choix de lùoperation*/
String choixOp=(String)choixoperation.getSelectedItem();
/* condition du choix de l'operation
1. si son choix est le depot*/
if(choixOp.equals("DEPOT")){
/*recuperation du choix de la devise*/
String choixDev=(String)choixdevise.getSelectedItem();
if(choixDev.equals("$")){
/* recuperation du montant a deposer dans le champ montantinserer */
double MontantInserer=Double.parseDouble(montantinserer.getText());
/* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. là nous sommes dans dollar*/
double MontantActuel=Double.parseDouble(montantdollar.getText());
/* recuperation du pourcentage des frais a couper qui est inscrit dans 
pourc initialisé par le proprietaire de la boite*/
double pourcentage1=Double.parseDouble(pourc1.getText());
/*Calcul des frais a couper*/
double frais=MontantInserer*(pourcentage1/100);
/* calcul de la somme a introduire dans le compte du client*/
double nouveauMontant=MontantInserer-frais;
final SimpleDateFormat sdf= new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
        final String datestr=sdf.format(new Date ());
        String motif="Depot";
        total.setText(""+nouveauMontant);
        double mmmm=Double.parseDouble(total.getText());
        double NouveauMontant= mmmm+MontantActuel;
/* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Deposé : "+nouveauMontant+"\n appuyer 1 pour continuer ");
    DepotDollar(nom.getText(), post.getText(), pre.getText(), datestr,MontantInserer, motif, NouveauMontant);
    RfraisD();
    double frd=Double.parseDouble(sfrais.getText());
    double cfrd =frd+frais;
    monfraisd(cfrd, datestr);
RDollar();
double b=Double.parseDouble(cachecache.getText());
double c=b+nouveauMontant;

/*      Enregistrement dans le bilan */

    EnregistrementBilan(datestr, c);
    /*   reinitialisqation des champs */
      cachecache.setText("");
      total.setText("");
      montantinserer.setText("");
      Nom=nom.getText();
      Postnom=(post.getText());
      Prenom=(pre.getText());
      Date=(datestr);
      Montant=(""+MontantInserer);
      Motif=(motif);
      Frais=(""+frais);
      Total=(""+NouveauMontant);
      Devise1=("Dollar");
      int option=JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?","Impression",
        JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
      if(option == JOptionPane.OK_OPTION){
           Impri();
        }
      else{
          
      }
}
/*-------------------- depot Franc-------------------*/
if(choixDev.equals("FC")){
/* recuperation du montant a deposer dans le champ montantinserer */
double MontantInserer=Double.parseDouble(montantinserer.getText());
/* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. là nous sommes dans dollar*/
double MontantActuel=Double.parseDouble(montantfranc.getText());
/* recuperation du pourcentage des frais a couper qui est inscrit dans 
pourc initialisé par le proprietaire de la boite*/
double pourcentage=Double.parseDouble(pourc.getText());
/*Calcul des frais a couper*/
double frais=MontantInserer*(pourcentage/100);
/* calcul de la somme a introduire dans le compte du client*/
double nouveauMontant=MontantInserer-frais;

final SimpleDateFormat sdf= new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
        final String datestr=sdf.format(new Date ());
        String motif="Depot"; 
        total.setText(""+nouveauMontant);
        double mmmm=Double.parseDouble(total.getText());
        double NouveauMontant= mmmm+MontantActuel;
/* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Deposé : "+nouveauMontant+"\n appuyer 1 pour continuer ");
    DepotFranc(nom.getText(), post.getText(), pre.getText(), datestr,MontantInserer, motif, NouveauMontant);
    RfraisF();
    double frd=Double.parseDouble(sfrais.getText());
    double cfrd =frd+frais;
    MonFrais(cfrd, datestr);
RFranc();
double b=Double.parseDouble(cachecache.getText());
double c=b+nouveauMontant;
    EnregistrementBilan2(datestr, c);
    cachecache.setText("");
    montantinserer.setText("");
    total.setText("");
      Nom=(nom.getText());
      Postnom=(post.getText());
      Prenom=(pre.getText());
      Date=(datestr);
      Montant=(""+MontantInserer);
      Motif=(motif);
      Frais=(""+frais);
      Total=(""+NouveauMontant);
      Devise1=("FRANC");
      int option=JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?","Impression",
        JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
      if(option == JOptionPane.OK_OPTION){
           Impri();
        }
      else{
          
      }
} 
}

/*------------------- Retrait dollar-----------------------*/

if(choixOp.equals("RETRAIT")){
/*recuperation du choix de la devise*/
String choixDev=(String)choixdevise.getSelectedItem();
if(choixDev.equals("$")){
/* recuperation du montant a deposer dans le champ montantinserer */
double MontantInserer=Double.parseDouble(montantinserer.getText());
/* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. là nous sommes dans dollar*/
double MontantActuel=Double.parseDouble(montantdollar.getText());
double nouveauMontant=MontantActuel-MontantInserer;
if(nouveauMontant>0){
      total.setText(""+nouveauMontant);
    double NouveauMontant=Double.parseDouble(total.getText());
final SimpleDateFormat sdf= new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
        final String datestr=sdf.format(new Date ());
        String motif="Retrait";
/* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Deposé : "+nouveauMontant+"\n appuyer 1 pour continuer ");
    DepotDollar(nom.getText(), post.getText(), pre.getText(), datestr,MontantInserer, motif, nouveauMontant);
    
RDollar();
double b=Double.parseDouble(cachecache.getText());
double c=b-MontantInserer;
    EnregistrementBilan(datestr, c);
    cachecache.setText("");
    total.setText("");
    montantinserer.setText("");
    
      Nom=(nom.getText());
      Postnom=(post.getText());
      Prenom=(pre.getText());
      Date=(datestr);
      Motif=(motif);
      Frais=("---");
      Montant=(""+MontantInserer);
      Total=(""+NouveauMontant);
      Devise1=("Dollar");
      int option=JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?","Impression",
        JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
      if(option == JOptionPane.OK_OPTION){
           Impri();
        }
      else{
          
      }
}
else{
    JOptionPane.showMessageDialog(null,"Votre solde et insuffisant");
    
}
}
/*------------------- Retrait franc-----------------------*/
if(choixDev.equals("FC")){
/* recuperation du montant a deposer dans le champ montantinserer */
double MontantInserer=Double.parseDouble(montantinserer.getText());
/* recuperation du montant actuel dans le 
compte du client afficher a l'aide de la 
methode de recherche. là nous sommes dans dollar*/
double MontantActuel=Double.parseDouble(montantfranc.getText());
double nouveauMontant=MontantActuel-MontantInserer;
if(nouveauMontant>0){
   total.setText(""+nouveauMontant);
    double NouveauMontant=Double.parseDouble(total.getText());
final SimpleDateFormat sdf= new SimpleDateFormat("dd-MM-yyyy  hh:mm:ss");
        final String datestr=sdf.format(new Date ());
        String motif="Retrait";
/* on depose cela dans la table franc*/
//int confirmation=Integer.parseInt("Montant inserer : "+MontantInserer+"\nFrais : "+frais+"\nMonatant Deposé : "+nouveauMontant+"\n appuyer 1 pour continuer ");
    DepotFranc(nom.getText(), post.getText(), pre.getText(), datestr,MontantInserer, motif, NouveauMontant);
    
RFranc();
double b=Double.parseDouble(cachecache.getText());
double c=b-MontantInserer;
    EnregistrementBilan2(datestr, c);
    cachecache.setText("");
    total.setText("");
    montantinserer.setText("");
    
      Nom=(nom.getText());
      Postnom=(post.getText());
      Prenom=(pre.getText());
      Date=(datestr);
      Montant=(""+MontantInserer);
      Motif=(motif);
      Frais=("---");
      Total=(""+NouveauMontant);
      Devise1=("FRANC");
      int option=JOptionPane.showConfirmDialog(null, "Voullez-vous imprimer?","Impression",
        JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
      if(option == JOptionPane.OK_OPTION){
           Impri();
        }
      else{
          
      }   
}
else {
    JOptionPane.showMessageDialog(null,"Votre solde est  insuffisant");
}
}
}
}

/*  Prendre le nom du propio*/

public void prendreNomDuProprio(){
    try{
        ouverture();
        this.st=(Statement)this.con.createStatement();
        this.requetteVerifier="Select Nom From proprio where 1";
        ResultSet rs = this.st.executeQuery(requetteVerifier);
        while(rs.next()){
            String a =rs.getString("Nom");
            NomPro.setText(a);
           
        }
        fermeture();
    }catch(Exception e){    
    }
}


}


